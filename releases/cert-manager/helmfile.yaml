# Single source of truth for environments
bases:
- environments.yaml
---
# Helm Charts source(s)
repositories:
- name: jetstack
  url: https://charts.jetstack.io
- name: incubator
  url: https://charts.helm.sh/incubator
# Helm Chart Release info
releases:
- name: cert-manager
  chart: jetstack/cert-manager
  version: 1.3.1
  namespace: cert-manager
  createNamespace: true
  hooks:
    - events: ["presync"]
      command: "kubectl"
      args: ["apply", "-f", "https://github.com/jetstack/cert-manager/releases/download/v1.3.1/cert-manager.crds.yaml"]
    - events: ["postuninstall"]
      command: "kubectl"
      args: ["delete", "-f", "https://github.com/jetstack/cert-manager/releases/download/v1.3.1/cert-manager.crds.yaml"]
  values:
    - resources:
        limits:
          cpu: {{ .Values.limit_cpu | quote }}
          memory: {{ .Values.limit_memory | quote }}
{{ if eq .Values.issuer "cf" }}
# cert-manager API TOKEN for cloudflare
- name: cert-manager-cloudflare-secret
  chart: "incubator/raw"
  namespace: "cert-manager"
  labels:
    component: "cert-manager"
    namespace: "cert-manager"
    default: "true"
  wait: true
  force: true
  needs:
    - cert-manager/cert-manager
  values:
  - resources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: cloudflare-api-token-secret
      type: Opaque
      stringData:
        api-token: {{ .Values.cf_api_token }}
{{ end }}
{{ if eq .Values.issuer "clouddns" }}
# cert-manager GCP SA KEY for GCP Cloud DNS
- name: cert-manager-clouddns-secret
  chart: "incubator/raw"
  namespace: "cert-manager"
  labels:
    component: "cert-manager"
    namespace: "cert-manager"
    default: "true"
  wait: true
  force: true
  needs:
    - cert-manager/cert-manager
  values:
  - resources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: cloud-dns-key
      type: Opaque
      stringData:
        key.json: {{ .Values.gcp_key_b64 }}
{{ end }}
{{ if eq .Values.issuer "route53" }}
# cert-manager AWS credentials for AWS Route53
- name: cert-manager-aws-access-key-secret
  chart: "incubator/raw"
  namespace: "cert-manager"
  labels:
    component: "cert-manager"
    namespace: "cert-manager"
    default: "true"
  wait: true
  force: true
  needs:
    - cert-manager/cert-manager
  values:
  - resources:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: aws-route53-secret-access-key-secret
      type: Opaque
      data:
        secret-access-key: {{ .Values.aws_access_key_b64 }}
{{ end }}
# cert-manager ClusterIssuer for cloudflare
- name: letsencrypt-cert-issuer
  namespace: cert-manager
  chart: incubator/raw
  atomic: false
  cleanupOnFail: true
  force: true
  needs:
    - cert-manager/cert-manager
  values:
    - resources:
        - apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-staging
          spec:
            acme:
              server: https://acme-staging-v02.api.letsencrypt.org/directory
              email: {{ .Values.acme_email }}
              privateKeySecretRef:
                name: letsencrypt-staging
              solvers:
              - dns01:
                  {{ if eq .Values.issuer "cf" }}
                  cloudflare:
                    email: {{ .Values.cf_email }}
                    apiTokenSecretRef:
                      name: cloudflare-api-token-secret
                      key: api-token
                  {{ end }}
                  {{ if eq .Values.issuer "clouddns" }}
                  clouddns:
                    clouddns:
                      # Set this to your GCP project-id
                      project: {{ .Values.gcp_project_id }}
                      # Set this to the secret that we publish our service account key
                      # in the previous step.
                      serviceAccountSecretRef:
                        name: cloud-dns-key
                        key: key.json
                  {{ end }}
                  {{ if eq .Values.issuer "route53" }}
                  providers:
                    - name: aws-route53
                      route53:
                        accessKeyID: {{ .Values.aws_access_key_id }}
                        region: {{ .Values.aws_region }}
                        secretAccessKeySecretRef:
                          name: aws-route53-secret-access-key-secret
                          key: secret-access-key
                  {{ end }}
        - apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: {{ .Values.acme_email }}
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - dns01:
                  {{ if eq .Values.issuer "cf" }}
                  cloudflare:
                    email: {{ .Values.cf_email }}
                    apiTokenSecretRef:
                      name: cloudflare-api-token-secret
                      key: api-token
                  {{ end }}
                {{ if eq .Values.issuer "clouddns" }}
                clouddns:
                  clouddns:
                    # Set this to your GCP project-id
                    project: {{ .Values.gcp_project_id }}
                    # Set this to the secret that we publish our service account key
                    # in the previous step.
                    serviceAccountSecretRef:
                      name: cloud-dns-key
                      key: key.json
                {{ end }}
                {{ if eq .Values.issuer "route53" }}
                providers:
                  - name: aws-route53
                    route53:
                      accessKeyID: {{ .Values.aws_access_key_id }}
                      region: {{ .Values.aws_region }}
                      secretAccessKeySecretRef:
                        name: aws-route53-secret-access-key-secret
                        key: secret-access-key
                {{ end }}
